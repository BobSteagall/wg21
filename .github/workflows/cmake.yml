# Copyright (c) 2018-2020  Robert N. Steagall and KEWB Computing
# All rights reserved.

# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
# associated documentation files (the "Software"), to deal with the Software without restriction,
# including without limitation the rights to use, copy, modify, merge, publish, distribute, 
# sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is 
# furnished to do so, subject to the following conditions:

# 1. Redistributions of source code must retain the above copyright notice, this list of conditions
#    and the following disclaimers.
# 2. Redistributions in binary form must reproduce the above copyright notice, this list of 
#    conditions and the following disclaimers in the documentation and/or other materials provided
#    with the distribution.
# 3. Neither the names of the copyright holder, nor the names of its contributors may be used 
#    to endorse or promote products derived from this Software without specific prior written
#    permission. 

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT 
# NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE. 

name: CMake

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    name: ${{ matrix.settings.name }} ${{ matrix.configuration }}
    runs-on: ${{ matrix.settings.os }}
    strategy:
      matrix:
        configuration: [ "Release", "Debug" ]
        settings:
          - {
              name: "Ubuntu GCC-11",
              os: ubuntu-latest,
              compiler: { type: GCC, version: 11, conan: "gcc", cc: "gcc-11", cxx: "g++-11", std: 20 },
              lib: "libstdc++11"
            }
          - {
              name: "Ubuntu GCC-12",
              os: ubuntu-latest,
              compiler: { type: GCC, version: 12, conan: "gcc", cc: "gcc-12", cxx: "g++-12", std: 20 },
              lib: "libstdc++11"
            }
          - {
              name: "Ubuntu GCC-13",
              os: ubuntu-latest,
              compiler: { type: GCC, version: 13, conan: "gcc", cc: "gcc-13", cxx: "g++-13", std: 20 },
              lib: "libstdc++11"
            }
          - {
              name: "Ubuntu Clang-14 + libc++",
              os: ubuntu-latest,
              compiler:
                {
                  type: CLANG,
                  version: 14,
                  conan: "clang",
                  cc: "clang-14",
                  cxx: "clang++-14",
                  std: 20
                },
              lib: "libc++",
            }
          - {
              name: "Ubuntu Clang-15 + libc++",
              os: ubuntu-latest,
              compiler:
                {
                  type: CLANG,
                  version: 15,
                  conan: "clang",
                  cc: "clang-15",
                  cxx: "clang++-15",
                  std: 20
                },
              lib: "libc++",
            }
          - {
              name: "Ubuntu Clang-16 + libc++",
              os: ubuntu-latest,
              compiler:
                {
                  type: CLANG,
                  version: 16,
                  conan: "clang",
                  cc: "clang-16",
                  cxx: "clang++-16",
                  std: 20
                },
              lib: "libc++",
            }
          - {
              name: "Ubuntu Clang-17 + libc++",
              os: ubuntu-latest,
              compiler:
                {
                  type: CLANG,
                  version: 17,
                  conan: "clang",
                  cc: "clang-17",
                  cxx: "clang++-17",
                  std: 20
                },
              lib: "libc++",
            }
          - {
              name: "Visual Studio 2019",
              os: windows-latest,
              compiler: { type: VISUAL, version: 16, conan: "mscv", cc: "cl", cxx: "cl", std: 20 },
            }
          - {
              name: "MacOS Apple Clang 14",
              os: macos-13,
              compiler:
                {
                  type: APPLE_CLANG,
                  version: "14.3.1",
                  conan: "apple-clang",
                  cc: "clang",
                  cxx: "clang++",
                  std: 20
                },
              lib: "libc++",
            }
          - {
              name: "MacOS Apple Clang 15",
              os: macos-14,
              compiler:
                {
                  type: APPLE_CLANG,
                  version: "15.2",
                  conan: "apple-clang",
                  cc: "clang",
                  cxx: "clang++",
                  std: 20
                },
              lib: "libc++",
            }
    steps:
      - uses: actions/checkout@v4.1.1

      - name: Add msbuild to PATH
        if: matrix.settings.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v1.3.1
        with:
          vs-version: "16.5"

      - name: Install Latest GCC
        if: matrix.settings.compiler.type == 'GCC'
        uses: egor-tensin/setup-gcc@v1.3
        with:
          version: ${{ matrix.settings.compiler.version }}
          platform: x64

      - name: Install Latest libstdC++11
        if: matrix.settings.compiler.type == 'CLANG' && matrix.settings.lib == 'libstdc++11'
        uses: egor-tensin/setup-gcc@v1.3
        with:
          version: 12
          platform: x64

      - name: Install Clang
        if: matrix.settings.compiler.type == 'CLANG'
        uses: egor-tensin/setup-clang@v1.4
        with:
          version: ${{ matrix.settings.compiler.version }}
          platform: x64

      - name: Install Libc++
        if: matrix.settings.compiler.type == 'CLANG' && matrix.settings.lib == 'libc++'
        shell: bash
        run: |
          sudo apt install -y libc++-${{ matrix.settings.compiler.version }}-dev libc++abi-${{ matrix.settings.compiler.version }}-dev libunwind-${{ matrix.settings.compiler.version }}-dev

      - name: Select Xcode ${{matrix.settings.compiler.version}}
        if: contains(matrix.settings.os, 'macos')
        uses: maxim-lobanov/setup-xcode@v1.6.0
        with:
          xcode-version: '${{matrix.settings.compiler.version}}'

      - name: Configure CMake
        shell: bash
        run: |
          cmake -Bbuild

      - name: CMake Build
        shell: bash
        run: |
          cmake --build build

      - name: CTest
        shell: bash
        run: |
          ctest --test-dir build
